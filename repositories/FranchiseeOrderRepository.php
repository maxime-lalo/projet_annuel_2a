<?php
require_once __DIR__ . "/RecipeRepository.php";
require_once __DIR__ . "/UserRepository.php";

class FranchiseeOrderRepository extends AbstractRepository
{
    private int $id;

    private User $user;
    private Warehouse $warehouse;
    private DateTime $date;

    private array $foods;
    private array $missing;

    private array $recipes;
    private float $percentage;

    public function getOneById(int $id)
    {
        $sql = $this->dbManager->getAll("SELECT * FROM franchisee_order a INNER JOIN franchisee_order_content b ON a.id = b.id_order WHERE a.id = ?",[
            $id
        ]);
        return parent::getOneById($id); // TODO: Change the autogenerated stub
    }

    public function createOrder(){
        $rRepo = new RecipeRepository();
        $uRepo = new UserRepository();
        $user = $uRepo->getOneById($_COOKIE['user_id']);

        if (isset($_SESSION['basket'])){
            $ingredientsList = array();

            foreach ($_SESSION['basket'] as $article){
                $recipe = $rRepo->getOneById($article['recipe']['id']);
                $quantity = $article['quantity'];

                foreach ($recipe->getIngredients() as $ingredient){
                    if (isset($ingredientsList[$ingredient->getId()])){
                        $actualQuantity = $ingredientsList[$ingredient->getId()]->getQuantity();
                        $ingredientsList[$ingredient->getId()]->setQuantity($actualQuantity + ($ingredient->getQuantity() * $quantity));
                    }else{
                        $ingredient->setQuantity($ingredient->getQuantity() * $quantity);
                        $ingredientsList[$ingredient->getId()] = $ingredient;
                    }
                }
            }

            $missingIngredients = array();
            $notMissingIngredients = array();

            foreach ($ingredientsList as $ingredient){
                $quantityNeeded = $ingredient->getQuantity() / $ingredient->getWeight();
                if ($quantityNeeded != intval($quantityNeeded)){
                    $quantityNeeded = intval($quantityNeeded)+1;
                }else{
                    $quantityNeeded = intval($quantityNeeded);
                }

                $res = $rRepo->checkFoodStock($ingredient, $user->getWarehouse());

                $ingredient->setQuantity($quantityNeeded);

                if ($res == null){
                    $missingIngredients[] = $ingredient;
                }else{
                    if ($res - $quantityNeeded >= 0){
                        $notMissingIngredients[] = $ingredient;
                    }else{
                        if ($res == 0){
                            $missing[] = $ingredient;
                        }else{
                            $ingredient->setQuantity($res);
                            $notMissingIngredients[] = $ingredient;

                            $ingredient2 = clone $ingredient;
                            $ingredient2->setQuantity(-($res - $quantityNeeded));
                            $missingIngredients[] = $ingredient2;
                        }
                    }
                }
            }

            $header = $this->dbManager->exec("INSERT INTO franchisee_order (id_user, id_warehouse, percentage, missing) VALUES (?,?,?,?)",[
                $user->getId(),
                $user->getWarehouse()->getId(),
                100,
                json_encode($missingIngredients)
            ]);

            $lastInsertId = $this->dbManager->getLastInsertId();
            foreach ($notMissingIngredients as $ingredient){
                $lines = $this->dbManager->exec("INSERT INTO franchisee_order_content (id_order, id_food, quantity) VALUES (?,?,?)",[
                    $lastInsertId,
                    $ingredient->getId(),
                    $ingredient->getQuantity()
                ]);

                $removeFromStock = $this->dbManager->exec("UPDATE stock SET quantity = quantity - ? WHERE id_food = ? AND id_warehouse = ?",[
                    $ingredient->getQuantity(),
                    $ingredient->getId(),
                    $user->getWarehouse()->getId()
                ]);
            }

            unset($_SESSION['basket']);
        }
    }
}